name: Deploy a new version

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag'
        required: true
        default: v0.1.0

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: mkdocs

    steps:
      - uses: actions/checkout@v4
      - name: Push new version tag temporarily for changelog generation
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com
          git tag -a ${{ github.event.inputs.version_tag }} -m ${{ github.event.inputs.version_tag }}
          git push --tags

      - name: Update CHANGELOG
        id: changelog
        uses: requarks/changelog-action@v1.10.0
        with:
          includeInvalidCommits: true
          excludeTypes: build,docs,style
          token: ${{ github.token }}
          tag: ${{ github.event.inputs.version_tag }}
          changelogFilePath: docs/CHANGELOG.md

      - name: Commit docs/CHANGELOG.md and update tag
        run: |
          git tag -d ${{ github.event.inputs.version_tag }}
          git push origin --delete ${{ github.event.inputs.version_tag }}
          git add docs/CHANGELOG.md
          git commit -m "docs: update docs/CHANGELOG.md for ${{ github.event.inputs.version_tag }} [skip ci]"
          git tag -a ${{ github.event.inputs.version_tag }} -m ${{ github.event.inputs.version_tag }}
          git push
          git push --tags

      - name: Create Release
        uses: ncipollo/release-action@v1.13.0
        with:
          allowUpdates: true
          draft: false
          makeLatest: true
          name: ${{ github.event.inputs.version_tag }}
          tag: ${{ github.event.inputs.version_tag }}
          body: ${{ steps.changelog.outputs.changes }}

      - name: Set up Python
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version-file: pyproject.toml
          cache: 'pip'
          cache-dependency-path: |
            requirements_docs.txt
      - name: Install dependencies
        if: steps.setup-python.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip3 install -r requirements_docs.txt
      - name: Run mkdocs
        run: |
          set +e  # Do not exit shell on failure
          export HTTPS_REMOTE="https://gitlab-ci-token:${{ secrets.GL_TOKEN }}@gitlab.com/${{ vars.GL_PROJECT }}.git"

          git remote add gitlab "$HTTPS_REMOTE"
          git branch -D gl-pages
          git pull gitlab gl-pages:gl-pages

          # Delete the latest page because we're going to make it as an alias to the latest version.
          python -c "from mike.driver import main; main()" delete --deploy-prefix public -r $HTTPS_REMOTE -b gl-pages latest
          out=$(python -c "from mike.driver import main; main()" deploy --deploy-prefix public -r $HTTPS_REMOTE -p -b gl-pages -u ${{ github.event.inputs.version_tag }} latest 2> stderr.txt)
          exit_code=$?
          err=$(<stderr.txt)

          python -c "from mike.driver import main; main()" set-default --deploy-prefix public -r $HTTPS_REMOTE -p -b gl-pages latest

          # Display the raw output in the step
          echo "${out}"
          echo "${err}"

          # Display the Markdown output in the job summary
          echo "\`\`\`python" >> $GITHUB_STEP_SUMMARY
          echo "${out}" >> $GITHUB_STEP_SUMMARY
          echo "${err}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          exit ${exit_code}
